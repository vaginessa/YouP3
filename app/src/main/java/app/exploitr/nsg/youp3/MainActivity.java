package app.exploitr.nsg.youp3;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.http.SslError;
import android.os.Build;
import android.os.Bundle;
import android.os.Process;
import android.support.annotation.NonNull;
import android.support.constraint.ConstraintLayout;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.NavigationView;
import android.support.design.widget.Snackbar;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.SearchView;
import android.support.v7.widget.Toolbar;
import android.view.Gravity;
import android.view.MenuItem;
import android.view.View;
import android.webkit.SslErrorHandler;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Toast;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;

public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {

    WebView mainView;
    ProgressDialog dialog;
    Context mContext;
    View mView;
    ConstraintLayout main;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        mContext = this;
        mView = getWindow().getDecorView().getRootView();

        if (!isNetworkAvailable()) {

            AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
            builder.setTitle("Network Error :");
            builder.setMessage("\nCan't Connect To Server");
            builder.setPositiveButton("Exit", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    Process.killProcess(Process.myPid());
                }
            });
            AlertDialog alert = builder.create();
            alert.show();
        } else new UpdateTaskChecker(mContext, mView).execute();

        dialog = new ProgressDialog(MainActivity.this);
        dialog.setMessage("Connecting...");
        dialog.setCancelable(false);
        dialog.setIndeterminate(false);
        dialog.setProgress(0);
        dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
        dialog.show();

        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (mainView.getUrl().contains("watch?v=")) {
                    Snackbar.make(view, "Please Wait While Making Request", Snackbar.LENGTH_LONG).setAction("Action", null).show();
                    new DownloadTask(mContext, mView).execute(mainView.getUrl());
                } else {
                    Snackbar.make(view, "Please Select A Valid Youtube Video ", Snackbar.LENGTH_LONG).show();
                }
            }
        });

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        main = (ConstraintLayout)findViewById(R.id.main);

        mainView = new WebView(getApplicationContext());
        ConstraintLayout.LayoutParams mainViewParams = new ConstraintLayout.LayoutParams(ConstraintLayout.LayoutParams.MATCH_CONSTRAINT,ConstraintLayout.LayoutParams.MATCH_CONSTRAINT);
        main.addView(mainView,0,mainViewParams);

        mainView.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);

        final WebSettings settings = mainView.getSettings();
        settings.setJavaScriptEnabled(true);
        settings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        settings.setAppCacheEnabled(true);
        settings.setRenderPriority(WebSettings.RenderPriority.HIGH);
        settings.setDomStorageEnabled(true);
        settings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);
        settings.setUseWideViewPort(true);
        settings.setSaveFormData(true);
        settings.setDatabaseEnabled(true);
        settings.setEnableSmoothTransition(true);

        mainView.loadUrl("https://www.youtube.com/");
        mainView.setWebViewClient(new WebViewClient() {
            @Override
            public void onPageFinished(WebView view, String url) {
                if (dialog.isShowing()) dialog.dismiss();
                mainView.setVisibility(View.VISIBLE);
            }
            @Override
            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
                super.onReceivedSslError(view, handler, error);
                handler.proceed();
            }
        });

        mainView.setWebChromeClient(new WebChromeClient() {
            public void onProgressChanged(WebView view, int progress) {
                dialog.setProgress(progress);
            }
        });


        final SearchView searchView = (SearchView) findViewById(R.id.search_bar_main);
        searchView.setLayoutParams(new Toolbar.LayoutParams(Gravity.RIGHT));
        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                if (!query.equals("")) {
                    try {
                        mainView.loadUrl("https://www.youtube.com/results?search_query=" +
                                URLEncoder.encode(query, "UTF-8"));
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                        Process.killProcess(Process.myPid());
                    }
                } else {
                    Toast.makeText(getApplicationContext(), "Please enter some text to search.", Toast.LENGTH_SHORT).show();
                }
                searchView.clearFocus();
                return true;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                if (!newText.equals("")) {
                    try {
                        mainView.loadUrl("https://www.youtube.com/results?search_query=" +
                                URLEncoder.encode(newText, "UTF-8"));
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                        Process.killProcess(Process.myPid());
                    }
                }
                return true;
            }
        });



    }

    @Override
    public void onBackPressed() {
        if (mainView.canGoBack()) {
            mainView.goBack();
        } else {
            AlertDialog.Builder alertDialog = new AlertDialog.Builder(MainActivity.this);
            alertDialog.setTitle("Exit");
            alertDialog.setMessage("Close App?");
            alertDialog.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    mainView.clearCache(true);
                    mainView.clearHistory();
                    finish();
                }
            });
            alertDialog.setNegativeButton("Nope", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                }
            });
            AlertDialog dialog = alertDialog.create();
            dialog.show();
        }
    }


    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        int id = item.getItemId();
        if (id == R.id.go_home) {
            mainView.loadUrl("http://youtube.com");
        }
        if (id == R.id.go_music) {
            mainView.loadUrl("https://www.youtube.com/channel/UC-9-kyTW8ZkZNDHQJ6FgpwQ");
        }
        if (id == R.id.go_me) {
            startActivity(new Intent(MainActivity.this, AboutActivity.class));
        }
        if (id==R.id.go_exit){
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                finishAndRemoveTask();
            }else{
                finish();
            }
        }
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }


    private boolean isNetworkAvailable() {
        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
        return activeNetworkInfo != null && activeNetworkInfo.isConnected();
    }

}
