package app.exploitr.nsg.youp3;


import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Environment;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AlertDialog;
import android.view.View;

import com.androidnetworking.AndroidNetworking;
import com.androidnetworking.common.Priority;
import com.androidnetworking.error.ANError;
import com.androidnetworking.interfaces.DownloadListener;
import com.androidnetworking.interfaces.DownloadProgressListener;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

class DownloadTask extends AsyncTask<String, Object, JSONObject> {

    private URL totalUrl;
    private HttpURLConnection connection;
    private JSONObject mainData;
    private String title;
    private String link;
    private BufferedReader reader;
    private int x;
    private Context mContext;
    private Long filesize;
    private Integer bitrate;
    private View mView;
    private ProgressDialog dialog;
    private File file;

    DownloadTask(Context context, View screenView) {
        this.mContext = context;
        this.mView = screenView;
    }

    @Override
    protected JSONObject doInBackground(String... params) {
        Object mainUrl = params[0];
        x = 0;
        try {
            totalUrl = new URL("http://www.youtubeinmp3.com/fetch/?format=JSON&bitrate=1&filesize=1&video=" + mainUrl.toString());
            System.out.println(x++);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        try {
            connection = (HttpURLConnection) totalUrl.openConnection();
            connection.connect();
            System.out.println(x++);
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            System.out.println(x++);
        } catch (IOException e) {
            e.printStackTrace();
        }

        StringBuilder dataProcessor = new StringBuilder();
        System.out.println(x++);
        String out;

        try {
            while ((out = reader.readLine()) != null) {
                dataProcessor.append(out).append("\n");
                System.out.println(x++);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            mainData = new JSONObject(dataProcessor.toString());
            System.out.println(x++);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        if (connection != null) connection.disconnect();
        System.out.println(x++);
        if (reader != null) try {
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println(x++);
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return mainData;

    }

    @Override
    protected void onPostExecute(JSONObject result) {

        StringBuilder all = new StringBuilder();
        try {
            System.out.println(x++);
            title = result.getString("title");
            link = result.getString("link");
            filesize = result.getLong("filesize");
            bitrate = result.getInt("bitrate");
        } catch (Exception e) {
            e.printStackTrace();
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                e.getSuppressed();
            }
            Snackbar.make(mView, "Error Occurred // Please Retry", Snackbar.LENGTH_LONG).show();
        }

        if (title != null)
            all.append("Do you want to download the music from this video ? \n\n" + "Information : \nName : ").append(title);
        if (filesize != null)
            all.append("\nFilesize : ").append(((filesize / 1024) / 1024) + 1).append(" mb");
        if (bitrate != null)
            all.append("\nBitrate : ").append(bitrate);

        final AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
        builder.setTitle("New Download Task :");
        builder.setMessage(all.toString());

        builder.setPositiveButton("Yup!", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                DownloadFile(link, title);
            }
        });
        builder.setNegativeButton("Nope", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });
        AlertDialog alert = builder.create();
        alert.show();

    }

    private void DownloadFile(final String link, final String title) {

        dialog = new ProgressDialog(mContext);
        dialog.setIndeterminate(false);
        dialog.setMessage("Downloading Now : " + title + ".mp3");
        dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
        dialog.setCancelable(false);
        dialog.show();

        System.out.println("START DOWNLOAD FILE METHOD");
        System.out.println(title);
        System.out.println(link);
        System.out.println("STOP DOWNLOAD FILE METHOD");

        AndroidNetworking.download(link, Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath(), title + ".mp3")
                .setTag("MP3: " + title)
                .setPriority(Priority.HIGH)
                .build()
                .setDownloadProgressListener(new DownloadProgressListener() {
                    @Override
                    public void onProgress(long bytesDownloaded, long totalBytes) {
                        int percentage = (int) (bytesDownloaded * 100.0 / totalBytes + 0.5);
                        System.out.println(percentage);
                        dialog.setProgress(percentage);
                    }
                })
                .startDownload(new DownloadListener() {
                    @Override
                    public void onDownloadComplete() {
                        file = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath() + "/" + title + ".mp3");
                        dialog.dismiss();
                        if (file.length() < 500000) {
                            Snackbar.make(mView, "Download Error", Snackbar.LENGTH_LONG).setAction("Retry", new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {

                                    /*
                                    * Retry
                                    *
                                    * */
                                    dialog.setProgress(0);
                                    dialog.show();
                                    AndroidNetworking.download(link, Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath(), title + ".mp3")
                                            .setTag("MP3: " + title)
                                            .setPriority(Priority.HIGH)
                                            .build()
                                            .setDownloadProgressListener(new DownloadProgressListener() {
                                                @Override
                                                public void onProgress(long bytesDownloaded, long totalBytes) {
                                                    int percentage = (int) (bytesDownloaded * 100.0 / totalBytes + 0.5);
                                                    System.out.println(percentage);
                                                    dialog.setProgress(percentage);
                                                }
                                            })
                                            .startDownload(new DownloadListener() {
                                                @Override
                                                public void onDownloadComplete() {
                                                    file = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath() + "/" + title + ".mp3");
                                                    dialog.dismiss();
                                                    if (file.length() < 500000) {
                                                        Snackbar.make(mView, "Download Error", Snackbar.LENGTH_LONG).show();
                                                    } else {
                                                        Snackbar.make(mView, "Download Completed : " + title + ".mp3", Snackbar.LENGTH_LONG).setAction("Play Now", new View.OnClickListener() {
                                                            @Override
                                                            public void onClick(View v) {
                                                                Uri path = Uri.fromFile(file);
                                                                Intent intent = new Intent(Intent.ACTION_VIEW);
                                                                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                                                intent.setDataAndType(path, "audio/mp3");
                                                                mContext.startActivity(intent);
                                                            }
                                                        }).show();
                                                    }
                                                }

                                                @Override
                                                public void onError(ANError error) {
                                                    dialog.dismiss();
                                                    Snackbar.make(mView, "Download Error : " + error.toString(), Snackbar.LENGTH_LONG).show();
                                                }
                                            });

                                    /*
                                    * retry
                                    *
                                    * */
                                }
                            }).show();
                        } else {
                            Snackbar.make(mView, "Download Completed : " + title + ".mp3", Snackbar.LENGTH_LONG).setAction("Play Now", new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    Uri path = Uri.fromFile(file);
                                    Intent intent = new Intent(Intent.ACTION_VIEW);
                                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    intent.setDataAndType(path, "audio/mp3");
                                    mContext.startActivity(intent);
                                }
                            }).show();
                        }
                    }

                    @Override
                    public void onError(ANError error) {
                        dialog.dismiss();
                        Snackbar.make(mView, "Download Error : " + error.toString(), Snackbar.LENGTH_LONG).show();
                    }
                });

    }

}
