package app.exploitr.nsg.youp3;


import android.app.DownloadManager;
import android.content.Context;
import android.content.DialogInterface;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Environment;
import android.support.v7.app.AlertDialog;
import org.json.JSONException;
import org.json.JSONObject;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

class DownloadTask extends AsyncTask<String, Object, JSONObject> {

    private URL totalUrl;
    private HttpURLConnection connection;
    private JSONObject mainData;
    private String title;
    private String length;
    private String link;
    private BufferedReader reader;
    private int x;
    private Context context;

    DownloadTask(Context mContext) {
        this.context = mContext;
    }

    @Override
    protected JSONObject doInBackground(String... params) {
        Object mainUrl = params[0];
        x = 0;
        try {
            totalUrl = new URL("http://www.youtubeinmp3.com/fetch/?format=JSON&video=" + mainUrl.toString());
            System.out.println(x++);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        try {
            connection = (HttpURLConnection) totalUrl.openConnection();
            connection.connect();
            System.out.println(x++);
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            System.out.println(x++);
        } catch (IOException e) {
            e.printStackTrace();
        }

        StringBuilder dataProcessor = new StringBuilder();
        System.out.println(x++);
        String out;

        try {
            while ((out = reader.readLine()) != null) {
                dataProcessor.append(out).append("\n");
                System.out.println(x++);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            mainData = new JSONObject(dataProcessor.toString());
            System.out.println(x++);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        if (connection != null) connection.disconnect();
        System.out.println(x++);
        if (reader != null) try {
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println(x++);
        return mainData;

    }

    @Override
    protected void onPostExecute(JSONObject result) {

        try {
            assert false;
            System.out.println(x++);
            title = result.getString("title");
            length = result.getString("length");
            link = result.getString("link");
        } catch (JSONException e) {
            e.printStackTrace();
        }

        String min = " minutes";
        StringBuilder lengthSB = new StringBuilder(length);
        lengthSB = lengthSB.deleteCharAt(0);
        Character character = length.charAt(0);
        if(length.length()<3){if(Integer.parseInt(character.toString())<6){min = " minute";}}
        AlertDialog.Builder builder = new AlertDialog.Builder(context);
        builder.setTitle("New Download Task :");
        builder.setMessage("Do you want to download the music from this video ? \n\n" + "Information : \nName : " +
                title + "\nLength : " + length.charAt(0)+min+" "+lengthSB.toString()+" seconds");

        builder.setPositiveButton("Yup!", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

                DownloadManager manager = (DownloadManager) context.getSystemService(Context.DOWNLOAD_SERVICE);
                Uri downloadUri = Uri.parse(link);
                DownloadManager.Request request = new DownloadManager.Request(downloadUri);
                request.setAllowedOverRoaming(true);
                request.setAllowedOverMetered(true);
                request.allowScanningByMediaScanner();
                request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, title + ".mp3");
                manager.enqueue(request);
                dialog.dismiss();
            }
        });
        builder.setNegativeButton("Nope", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });
        AlertDialog alert = builder.create();
        alert.show();

    }


}
