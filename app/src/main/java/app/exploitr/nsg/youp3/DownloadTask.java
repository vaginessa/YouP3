package app.exploitr.nsg.youp3;


import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Environment;
import android.support.design.widget.Snackbar;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AlertDialog;
import android.view.View;
import android.widget.EditText;
import android.widget.Toast;

import com.koushikdutta.async.future.FutureCallback;
import com.koushikdutta.ion.Ion;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

class DownloadTask extends AsyncTask<String, Object, JSONObject> {

    private URL totalUrl;
    private HttpURLConnection connection;
    private JSONObject mainData;
    private String title;
    private String link;
    private BufferedReader reader;
    private int x;
    private Context context;
    private Long filesize;
    private Integer bitrate;
    private View mView;
    private ProgressDialog dialog;

    DownloadTask(Context mContext, View screenView) {
        this.context = mContext;
        this.mView = screenView;
    }

    @Override
    protected JSONObject doInBackground(String... params) {
        Object mainUrl = params[0];
        x = 0;
        try {
            totalUrl = new URL("http://www.youtubeinmp3.com/fetch/?format=JSON&bitrate=1&filesize=1&video=" + mainUrl.toString());
            System.out.println(x++);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        try {
            connection = (HttpURLConnection) totalUrl.openConnection();
            connection.connect();
            System.out.println(x++);
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            System.out.println(x++);
        } catch (IOException e) {
            e.printStackTrace();
        }

        StringBuilder dataProcessor = new StringBuilder();
        System.out.println(x++);
        String out;

        try {
            while ((out = reader.readLine()) != null) {
                dataProcessor.append(out).append("\n");
                System.out.println(x++);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            mainData = new JSONObject(dataProcessor.toString());
            System.out.println(x++);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        if (connection != null) connection.disconnect();
        System.out.println(x++);
        if (reader != null) try {
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println(x++);
        return mainData;

    }

    @Override
    protected void onPostExecute(JSONObject result) {

        try {
            System.out.println(x++);
            title = result.getString("title");
            link = result.getString("link");
            filesize = result.getLong("filesize");
            bitrate = result.getInt("bitrate");
        } catch (Exception e) {
            e.printStackTrace();
            e.getSuppressed();
            Snackbar.make(mView, "Error Occurred // Please Retry", Snackbar.LENGTH_LONG).show();
        }

        final AlertDialog.Builder builder = new AlertDialog.Builder(context);
        builder.setTitle("New Download Task :");
        builder.setMessage("Do you want to download the music from this video ? \n\n" + "Information : \nName : " +
                title + "\nFilesize : " + (((filesize / 1024) / 1024) + 1) + " mb" + "\nBitrate : " + bitrate);

        builder.setPositiveButton("Yup!", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                    AlertDialog.Builder builder1 = new AlertDialog.Builder(context);
                    builder1.setMessage("Please Rename File To Download");
                    final EditText editText = new EditText(context);
                    builder1.setView(editText);
                    builder1.setPositiveButton("Okay", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            if(editText.getText().length()<0){
                                Toast.makeText(context,"What Are You Doing?",Toast.LENGTH_SHORT).show();
                            }else{
                            DownloadFile(link, editText.getText().toString());
                            dialog.dismiss();}
                        }
                    });
                    AlertDialog dialog1 = builder1.create();
                    dialog1.show();
                dialog.dismiss();
            }
        });
        builder.setNegativeButton("Nope", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });
        AlertDialog alert = builder.create();
        alert.show();

    }

    private void DownloadFile(String link, String title) {

        title = title.replaceAll("\\p{Punct}", " ");
        title = title.toLowerCase();
        dialog = new ProgressDialog(context);
        dialog.setIndeterminate(false);
        dialog.setMessage("Downloading Now : " + title + ".mp3");
        dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
        dialog.setCancelable(false);
        dialog.show();

        System.out.println("Link :" + link);
        System.out.println("Title :" + title);
        Ion.with(context)
                .load(link)
                .progressDialog(dialog)
                .followRedirect(true)
                .write(new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath() + "/" + title + ".mp3"))
                .setCallback(new FutureCallback<File>() {
                    @Override
                    public void onCompleted(Exception e, final File file) {
                        dialog.dismiss();
                        if (file != null) {
                            Snackbar.make(mView, "File Download Completed", Snackbar.LENGTH_LONG).setAction("Play", new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    Uri path = Uri.fromFile(file);
                                    Intent intent = new Intent(Intent.ACTION_VIEW);
                                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                                    intent.setDataAndType(path, "audio/mp3");
                                    try {
                                        context.startActivity(intent);
                                    } catch (ActivityNotFoundException e) {
                                        e.printStackTrace();
                                    }
                                }
                            }).setActionTextColor(ContextCompat.getColor(context, R.color.colorPrimaryDark)).show();
                        } else {
                            Snackbar.make(mView, "File Download Error // Retry", Snackbar.LENGTH_LONG).show();
                        }
                        if (e != null) {
                            e.printStackTrace();
                            Snackbar.make(mView, "File Download Error // Retry", Snackbar.LENGTH_LONG).show();
                        }
                    }
                });
    }

}
